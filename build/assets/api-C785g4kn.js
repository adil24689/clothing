import{p as i,s as c,a as h}from"./index-CCQ6ji_y.js";const d=`https://${h}.supabase.co/functions/v1/make-server-bb7a2527`;class m{async getHeaders(e=!1){const t={"Content-Type":"application/json"};if(e){const r=await this.getAuthToken();r?t.Authorization=`Bearer ${r}`:t.Authorization=`Bearer ${i}`}else t.Authorization=`Bearer ${i}`;return t}async getAuthToken(){try{const e=c.auth.getSession(),t=new Promise((a,n)=>setTimeout(()=>n(new Error("Auth token timeout")),2e3)),{data:{session:r},error:s}=await Promise.race([e,t]);return s?(console.warn("Failed to get session:",s),null):r?.access_token||null}catch(e){return console.warn("Auth token retrieval failed, using anon key:",e),null}}async makeRequest(e,t={},r=!1){try{const s=new AbortController,a=setTimeout(()=>s.abort(),5e3),n=await this.getHeaders(r),o=await fetch(`${d}${e}`,{...t,headers:{...n,...t.headers},signal:s.signal});if(clearTimeout(a),!o.ok){const u=await o.json().catch(()=>({error:"Network error"}));throw new Error(u.error||`HTTP ${o.status}`)}return await o.json()}catch(s){throw s.name==="AbortError"?new Error("Request timeout"):(console.warn(`API request failed for ${e}:`,s),s)}}async healthCheck(){return this.makeRequest("/health")}async signup(e,t,r){return this.makeRequest("/auth/signup",{method:"POST",body:JSON.stringify({email:e,password:t,name:r})})}async getUserProfile(){return this.makeRequest("/user/profile",{},!0)}async updateUserProfile(e){return this.makeRequest("/user/profile",{method:"PUT",body:JSON.stringify(e)},!0)}async getProducts(e){const t=new URLSearchParams;e&&Object.entries(e).forEach(([s,a])=>{a!=null&&t.append(s,a.toString())});const r=t.toString();return this.makeRequest(`/products${r?`?${r}`:""}`)}async getProduct(e){return this.makeRequest(`/products/${e}`)}async addProductReview(e,t,r){return this.makeRequest(`/products/${e}/reviews`,{method:"POST",body:JSON.stringify({rating:t,comment:r})},!0)}async createOrder(e){return this.makeRequest("/orders",{method:"POST",body:JSON.stringify(e)},!0)}async getUserOrders(){return this.makeRequest("/user/orders",{},!0)}async getOrder(e){return this.makeRequest(`/orders/${e}`,{},!0)}async getUserWishlist(){return this.makeRequest("/user/wishlist",{},!0)}async addToWishlist(e){return this.makeRequest(`/user/wishlist/${e}`,{method:"POST"},!0)}async removeFromWishlist(e){return this.makeRequest(`/user/wishlist/${e}`,{method:"DELETE"},!0)}async initializeData(){return this.makeRequest("/init-data",{method:"POST"})}}const k=new m;export{k as api};
